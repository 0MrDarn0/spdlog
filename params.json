{"name":"Spdlog","tagline":"Super fast C++ logging library.","body":"# spdlog\r\n\r\nVery fast, header only, C++ logging library.\r\n\r\n\r\n## Install\r\nJust copy the files to your build tree and use a C++11 compiler\r\n\r\n\r\n## Tested on:\r\n* gcc 4.8.1 and above\r\n* clang 3.5\r\n* visual studio 2013\r\n\r\n##Features\r\n* Very low overhead\r\n* Stream like, easy to use interface\r\n* Logging levels\r\n* Rotating log files\r\n* Daily log files\r\n* Async logging\r\n* Thread safety\r\n* Custom formatting\r\n\r\n\r\n## Performance\r\nThe library is very fast. \r\nHere are some benchmarks  (Ubuntu, Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz)\r\n```\r\n*******************************************************************************\r\nSingle thread, 250,000 iterations, flush every 1000 lines\r\n*******************************************************************************\r\nrotating_st...\t817,860 lines/sec\r\ndaily_st...\t\t827,820 lines /sec\r\n\r\n*******************************************************************************\r\n4 threads sharing same logger, 250,000 iterations, flush every 1000 lines\r\n*******************************************************************************\r\nrotating_mt...\t1,476,013 lines/sec\r\ndaily_mt...\t\t1,477,619 lines/sec\r\n```\r\n\r\n## Usage Example\r\n```\r\n#include <iostream>\r\n#include \"spdlog/spdlog.h\"\r\n\r\nint main(int, char* [])\r\n{\r\n    namespace spd = spdlog;\r\n\r\n    try\r\n    {\r\n        std::string filename = \"spdlog_example\";\r\n        auto console = spd::stderr_logger_mt(\"console\");\r\n        console->info(\"Welcome to spdlog!\") ;\r\n        console->info() << \"Creating file \" << filename << \"..\";\r\n\r\n        auto file_logger = spd::rotating_logger_mt(\"file_logger\", filename, 1024 * 1024 * 5, 3);\r\n        file_logger->info(\"Log file message number\", 1);\r\n\r\n        for (int i = 0; i < 100; ++i)\r\n        {\r\n            auto square = i*i;\r\n            file_logger->info() << i << '*' << i << '=' << square << \" (\" << \"0x\" << std::hex << square << \")\";\r\n        }\r\n\r\n        // Change log level to all loggers to warning and above\r\n        spd::set_level(spd::level::WARN);\r\n        console->info(\"This should not be displayed\");\r\n        console->warn(\"This should!\");\r\n        spd::set_level(spd::level::INFO);\r\n\r\n        // Change format pattern to all loggers\r\n        spd::set_pattern(\" **** %Y-%m-%d %H:%M:%S.%e %l **** %v\");\r\n        spd::get(\"console\")->info(\"This is another message with different format\");\r\n    }\r\n    catch (const spd::spdlog_ex& ex)\r\n    {\r\n        std::cout << \"Log failed: \" << ex.what() << std::endl;\r\n    }\r\n    return 0;\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}