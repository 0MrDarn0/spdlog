{"name":"Spdlog","tagline":"Super fast C++ logging library.","body":"# spdlog\r\n\r\nVery fast, header only, C++ logging library.\r\n\r\n## Install\r\nJust copy the files to your build tree and use a C++11 compiler\r\n\r\n## Tested on:\r\n* gcc 4.8.1 and above\r\n* clang 3.5 (Linux and OSX)\r\n* visual studio 2013\r\n* mingw with g++ 4.9.x\r\n\r\n##Features\r\n* Very fast - performance is the primary goal (see [benchmarks](#benchmarks) below).\r\n* Headers only.\r\n* No dependencies - just copy and use.\r\n* Cross platform - Linux / Windows on 32/64 bits.\r\n* **new!** Feature rich [call style](#usage-example) using the excellent [cppformat](http://cppformat.github.io/) library.\r\n* ostream call style is supported too.\r\n* Extremely fast asynchronous mode (optional) - using lockfree queues and other tricks to reach millions of calls/sec.\r\n* [Custom](https://github.com/gabime/spdlog/wiki/Custom-formatting) formatting.\r\n* Multi/Single threaded loggers.\r\n* Various log targets:\r\n    * Rotating log files.\r\n    * Daily log files.\r\n    * Console logging.\r\n    * Linux syslog.\r\n    * Easily extendable with custom log targets  (just implement a single function in the [sink](include/spdlog/sinks/sink.h) interface).\r\n* Severity based filtering - threshold levels can be modified in runtime as well as in compile time.\r\n\r\n\r\n\r\n## Benchmarks\r\n\r\nBelow are some [benchmarks](bench) comparing popular log libraries under Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz \r\n\r\n#### Synchronous mode\r\nTime needed to log 1,000,000 lines in synchronous mode (in seconds, the best of 3 runs):\r\n\r\n|threads|boost log|glog   |easylogging |spdlog|\r\n|-------|:-------:|:-----:|----------:|------:|\r\n|1|       4.169s  |1.066s |0.975s     |0.302s|\r\n|10|     16.029   |3.032s |2.857s     |0.968s|\r\n|100|     15.008  |1.139s |4.512s     |0.497s|\r\n\r\n\r\n#### Asynchronous mode \r\nTime needed to log 1,000,000 lines in asynchronous mode, i.e. the time it takes to put them in the async queue (in seconds, the best of 3 runs):\r\n\r\n|threads|g2log <sup>async logger</sup>   |spdlog <sup>async mode</sup>|\r\n|:-------|:-----:|-------------------------:|\r\n|1|       1.850s |0.216s |\r\n|10|      0.943s  |0.173s|\r\n|100|      0.959s |0.202s|\r\n\r\n\r\n\r\n\r\n## Usage Example\r\n```c++\r\n#include <iostream>\r\n#include \"spdlog/spdlog.h\"\r\n\r\nint main(int, char* [])\r\n{\r\n    namespace spd = spdlog;\r\n    try\r\n    {\r\n        //Create console, multithreaded logger\r\n        auto console = spd::stdout_logger_mt(\"console\");\r\n        console->info(\"Welcome to spdlog!\") ;\r\n        console->info(\"An info message example {}..\", 1);\r\n        console->info() << \"Streams are supported too  \" << 1;\r\n\t\r\n        //Formatting examples\r\n        console->info(\"Easy padding in numbers like {:08d}\", 12);\r\n        console->info(\"Support for int: {0:d};  hex: {0:x};  oct: {0:o}; bin: {0:b}\", 42);\r\n        console->info(\"Support for floats {:03.2f}\", 1.23456);\r\n        console->info(\"Positional args are {1} {0}..\", \"too\", \"supported\");\r\n\r\n        console->info(\"{:<30}\", \"left aligned\");\r\n        console->info(\"{:>30}\", \"right aligned\");\r\n        console->info(\"{:^30}\", \"centered\");\r\n        \r\n        //\r\n        // Runtime log levels\r\n        //\r\n        spd::set_level(spd::level::info); //Set global log level to info\r\n        console->debug(\"This message shold not be displayed!\");\r\n        console->set_level(spd::level::debug); // Set specific logger's log level\r\n        console->debug(\"Now it should..\");\r\n  \r\n        //\r\n        // Create a file rotating logger with 5mb size max and 3 rotated files\r\n        //\r\n        auto file_logger = spd::rotating_logger_mt(\"file_logger\", \"logs/mylogfile\", 1048576 * 5, 3);\r\n        for(int i = 0; i < 10; ++i)\r\n\t\t      file_logger->info(\"{} * {} equals {:>10}\", i, i, i*i);\r\n\r\n        //\r\n        // Create a daily logger - a new file is created every day on 2:30am\r\n        //\r\n        auto daily_logger = spd::daily_logger_mt(\"daily_logger\", \"logs/daily\", 2, 30);\r\n        \r\n        // \r\n        // Customize msg format for all messages\r\n        //\r\n        spd::set_pattern(\"*** [%H:%M:%S %z] [thread %t] %v ***\");\r\n        file_logger->info(\"This is another message with custom format\");\r\n\r\n        spd::get(\"console\")->info(\"loggers can be retrieved from a global registry using the spdlog::get(logger_name) function\");\r\n\r\n        //\r\n        // Compile time debug or trace macros.\r\n        // Enabled #ifdef SPDLOG_DEBUG_ON or #ifdef SPDLOG_TRACE_ON\r\n        //\r\n        SPDLOG_TRACE(console, \"Enabled only #ifdef SPDLOG_TRACE_ON..{} ,{}\", 1, 3.23);\r\n        SPDLOG_DEBUG(console, \"Enabled only #ifdef SPDLOG_DEBUG_ON.. {} ,{}\", 1, 3.23);\r\n        \r\n        //\r\n        // Asynchronous logging is very fast..\r\n        // Just call spdlog::set_async_mode(q_size) and all created loggers from now on will be asynchronous..\r\n        //\r\n        size_t q_size = 1048576; //queue size must be power of 2\r\n        spdlog::set_async_mode(q_size);\r\n        auto async_file= spd::daily_logger_st(\"async_file_logger\", \"logs/async_log.txt\");\r\n        async_file->info() << \"This is async log..\" << \"Should be very fast!\";\r\n          \r\n        //      \r\n        // syslog example. linux only..\r\n        //\r\n        #ifdef __linux__\r\n        std::string ident = \"spdlog-example\";\r\n        auto syslog_logger = spd::syslog_logger(\"syslog\", ident, LOG_PID);\r\n        syslog_logger->warn(\"This is warning that will end up in syslog. This is Linux only!\");       \r\n        #endif\r\n    }\r\n    catch (const spd::spdlog_ex& ex)\r\n    {\r\n        std::cout << \"Log failed: \" << ex.what() << std::endl;\r\n    }\r\n}\r\n\r\n\r\n// Example of user defined class with operator<<\r\nclass some_class {};\r\nstd::ostream& operator<<(std::ostream& os, const some_class& c) { return os << \"some_class\"; }\r\n\r\nvoid custom_class_example()\r\n{\r\n    some_class c;\r\n    spdlog::get(\"console\")->info(\"custom class with operator<<: {}..\", c);\r\n    spdlog::get(\"console\")->info() << \"custom class with operator<<: \" << c << \"..\";\r\n}\r\n```\r\n\r\n## Tweaking\r\nspdlog can be tweaked to improve performance even more.\r\n\r\nEdit [this](include/spdlog/tweakme.h) file  to disable at compile time unneeded features.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}